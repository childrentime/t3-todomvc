import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import logo from "../assets/logo.jpg";
import { nanoid } from "nanoid";

import { api } from "~/utils/api";
import { type ChangeEvent, useState, Fragment, useEffect, useRef } from "react";
import { useElementVisibility, useLocalStorage } from "@reactuses/core";

interface Todo {
  value: string;
  completed: boolean;
  deleted: boolean;
  randomId: string;
}

export default function Home() {
  const { data: sessionData } = useSession();
  const allTasks = api.post.all.useQuery(undefined, {
    staleTime: 3000,
    enabled: !!sessionData,
  });
  const inifiteQuery = api.post.inifinite.useInfiniteQuery(
    {
      limit: 10,
    },
    {
      getNextPageParam: (lastPage) => lastPage.nextCursor,
      refetchOnWindowFocus: false,
    },
  );

  const length = inifiteQuery.data?.pages.length;

  const ref = useRef<HTMLDivElement>(null);
  const [visible] = useElementVisibility(ref);

  useEffect(() => {
    if (visible) {
      void inifiteQuery.fetchNextPage();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [visible]);

  const posts = inifiteQuery.data?.pages ?? [];

  const [text, setText] = useState("");
  const [local, setLocal] = useState(true);
  const [localTodos, setLocalTodos] = useLocalStorage<Todo[]>("todos", []);

  const todos = local ? localTodos ?? [] : allTasks.data ?? [];

  const onChange = (e: ChangeEvent<HTMLInputElement>) => {
    setText(e.target.value);
  };

  const utils = api.useUtils();

  const handleCloudAdd = api.post.create.useMutation();

  const editCloudTodo = api.post.edit.useMutation({
    async onMutate(todo) {
      await utils.post.all.cancel();
      const todos = utils.post.all.getData();
      if (!todos) {
        return;
      }
      utils.post.all.setData(
        undefined,
        todos.map((t) =>
          t.id === todo.id
            ? {
                ...t,
                ...todo,
              }
            : t,
        ),
      );
    },
  });

  const deleteCloudTodos = api.post.delete.useMutation({
    async onMutate({ ids }) {
      await utils.post.all.cancel();
      const todos = utils.post.all.getData();
      if (!todos) {
        return;
      }
      utils.post.all.setData(
        undefined,
        todos.filter((t) => !ids.includes(t.id)),
      );
    },
  });

  const handleAdd = async () => {
    const randomId = nanoid();
    const todo: Todo = {
      value: text,
      completed: false,
      deleted: false,
      randomId,
    };
    if (local) {
      setLocalTodos([...(localTodos ?? []), todo]);
      return;
    }
    if (!sessionData) {
      await signIn();
    } else {
      const data = await handleCloudAdd.mutateAsync(todo);
      const todos = utils.post.all.getData();
      if (!todos) {
        return;
      }
      utils.post.all.setData(undefined, [data, ...todos]);
    }
  };

  const handleDelete = async (todo: Todo & { id: string }) => {
    if (local) {
      const newTodos = (localTodos ?? []).slice();
      const t = newTodos.find((t) => t.randomId === todo.randomId);
      if (!t) {
        return;
      }
      t.deleted = true;
      setLocalTodos(newTodos);
      return;
    }
    if (!sessionData) {
      await signIn();
    } else {
      editCloudTodo.mutate({ ...todo, deleted: true });
    }
  };

  const handleCompleted = async (todo: Todo & { id: string }) => {
    if (local) {
      const newTodos = (localTodos ?? []).slice();
      const t = newTodos.find((t) => t.randomId === todo.randomId);
      if (!t) {
        return;
      }
      t.completed = !t.completed;
      setLocalTodos(newTodos);
      return;
    }
    if (!sessionData) {
      await signIn();
    } else {
      editCloudTodo.mutate({ ...todo, completed: !todo.completed });
    }
  };

  const handleClear = async () => {
    if (local) {
      setLocalTodos(
        (localTodos ?? []).map((t) => {
          if (t.completed) {
            t.deleted = true;
          }
          return t;
        }),
      );
      return;
    }
    if (!sessionData) {
      await signIn();
    } else {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-assignment
      const ids = todos
        .filter((t) => {
          if (t.deleted) {
            return false;
          }
          return t.completed;
        })
        // @ts-expect-error ignore
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        .map((t) => t.id) as string[];
      deleteCloudTodos.mutate({ ids: ids });
    }
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col bg-white pb-12">
        <div className="flex w-full items-center justify-center bg-stone-200 px-16 py-5 max-md:max-w-full max-md:px-5">
          <Image
            className="aspect-[3.85] w-[231px] max-w-full"
            alt="logo"
            src={logo}
            priority
            width={231}
            height={60}
          />
        </div>
        <div className="flex w-full justify-between gap-0 whitespace-nowrap text-center text-3xl font-semibold tracking-widest max-md:max-w-full max-md:flex-wrap">
          <div
            className="flex flex-1 flex-col text-zinc-800 max-md:max-w-full"
            onClick={() => setLocal(true)}
          >
            <div className="flex flex-col bg-zinc-100 px-5 pt-8 max-md:max-w-full">
              <div className="self-center">Local</div>
              <div
                className={`mt-3.5 h-[5px] shrink-0 bg-amber-600 max-md:max-w-full ${local ? "" : "opacity-0"}`}
              />
            </div>
          </div>
          <div
            className="flex flex-1 flex-col justify-center text-neutral-400 max-md:max-w-full"
            onClick={async () => {
              if (!sessionData) {
                await signIn();
              }
              setLocal(false);
            }}
          >
            <div className="items-center bg-zinc-100 pb-5 pl-16 pr-16 pt-8 max-md:max-w-full max-md:px-5">
              Cloud
            </div>
            <div
              className={`h-[5px] shrink-0 bg-amber-600 max-md:max-w-full ${!local ? "" : "opacity-0"}`}
            />
          </div>
        </div>
        <div className="mt-10 flex w-[1040px] max-w-full justify-between gap-5 self-center rounded-[50px] bg-stone-200 pl-9 max-md:flex-wrap max-md:pl-5">
          <input
            className="flex flex-auto items-center bg-stone-200 text-3xl text-neutral-400 outline-none"
            placeholder="What do you need to do?"
            value={text}
            onChange={onChange}
          />
          <div
            className="cursor-pointer justify-center whitespace-nowrap rounded-none bg-slate-400 px-7 py-3 text-center text-4xl font-semibold tracking-widest text-zinc-100 max-md:px-5"
            onClick={handleAdd}
          >
            ADD
          </div>
        </div>

        <div className="mt-10 flex w-full max-w-[1040px] flex-col self-center whitespace-nowrap rounded-[50px] bg-stone-200 px-12 pt-3 text-3xl text-zinc-800 max-md:max-w-full max-md:px-5">
          {todos.map(
            (todo) =>
              !todo.deleted && (
                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                <Fragment key={todo.randomId}>
                  <div className="relative flex w-full justify-between gap-5 text-stone-300 max-md:max-w-full max-md:flex-wrap">
                    <div className="flex justify-between gap-2">
                      <Image
                        src={
                          todo.completed
                            ? "https://cdn.builder.io/api/v1/image/assets/TEMP/ec8dd020bd92a0e4b1a11ef4654069206453a7b65b4dacbae2974ca39b970938?"
                            : "https://cdn.builder.io/api/v1/image/assets/TEMP/fcb854ce50353f895c6487e8d61ccd8f70a57ed00b17cd563dc80763b0867791?"
                        }
                        className="aspect-square w-16"
                        priority
                        alt="completed"
                        width={64}
                        height={61}
                        // @ts-expect-error ignore
                        onClick={() => handleCompleted(todo)}
                      />
                      <div
                        className={`my-auto grow text-stone-950 ${todo.completed ? "line-through" : ""}`}
                      >
                        {todo.value}
                      </div>
                    </div>
                    <Image
                      src="https://cdn.builder.io/api/v1/image/assets/TEMP/69fa4be6c71f2d5471b22c530b512931e3947859278c9130ea75597dde2f94dc?"
                      className="my-auto aspect-square w-8"
                      alt="delete"
                      width={32}
                      height={32}
                      priority
                      onClick={() => {
                        // @ts-expect-error ignore
                        void handleDelete(todo);
                      }}
                    />
                  </div>
                  <div className="mt-3 h-px w-[868px] max-w-full self-center bg-slate-400" />
                </Fragment>
              ),
          )}
          <div
            className="mr-9 mt-20 flex gap-2.5 self-end px-2.5 py-5 text-2xl text-amber-600 max-md:mr-2.5 max-md:mt-10"
            onClick={handleClear}
          >
            <Image
              src="https://cdn.builder.io/api/v1/image/assets/TEMP/652f426dfcdc23a5e66c9bc45a95ee1be4ad21293dd82ef7a41ad47d66e8e3c0?"
              className="aspect-[0.83] w-7 self-start fill-amber-600"
              priority
              alt="clear completed"
              width={28}
              height={24}
            />
            <div className="grow">Clear Completed</div>
          </div>
        </div>
        <div>
          {posts.map((ps) => {
            const { items } = ps;
            return items.map((item) => {
              return <div key={item.id} className="mt-10 mb-10">{item.value}</div>;
            });
          })}
          <div ref={ref} />
        </div>
      </div>
    </>
  );
}
